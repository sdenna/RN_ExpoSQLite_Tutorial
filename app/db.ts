import { type SQLiteDatabase } from 'expo-sqlite';

/**
 * Item Interface
 * 
 * Defines the TypeScript type for a row in the `items` table.
 * This ensures type safety when working with database records.
 * 
 * @property id - Unique identifier (auto-generated by SQLite)
 * @property name - Name of the item (text)
 * @property quantity - Number of items (integer)
 */
export interface Item {
  id: number;
  name: string;
  quantity: number;
}

/**
 * Initialize Database
 * 
 * Creates the `items` table if it doesn't already exist.
 * This function is called automatically when the app starts (see _layout.tsx).
 * 
 * Table Schema:
 * - id: INTEGER PRIMARY KEY - Auto-incrementing unique identifier
 * - name: TEXT NOT NULL - Item name (required)
 * - quantity: INTEGER NOT NULL - Item quantity (required)
 * 
 * Note: "IF NOT EXISTS" prevents errors if the table is already created.
 * 
 * @param db - The SQLite database instance
 */
export async function initDb(db: SQLiteDatabase): Promise<void> {
  await db.execAsync(
    'CREATE TABLE IF NOT EXISTS items (id INTEGER PRIMARY KEY NOT NULL, name TEXT NOT NULL, quantity INTEGER NOT NULL);'
  );
}

/**
 * Insert Item
 * 
 * Adds a new item to the database.
 * 
 * Important: Uses parameterized queries (? placeholders) for security.
 * This prevents SQL injection attacks by treating user input as data, not code.
 * The values in the array [name, quantity] replace the ? placeholders in order.
 * 
 * Example: If name="Apple" and quantity=5, the query becomes:
 * INSERT INTO items (name, quantity) VALUES ('Apple', 5);
 * 
 * @param db - The SQLite database instance
 * @param name - The name of the item to insert
 * @param quantity - The quantity of the item to insert
 */
export async function insertItem(db: SQLiteDatabase, name: string, quantity: number): Promise<void> {
  await db.runAsync('INSERT INTO items (name, quantity) VALUES (?, ?);', [name, quantity]);
}

/**
 * Fetch All Items
 * 
 * Retrieves all items from the database as an array.
 * 
 * The <Item> type tells TypeScript what shape the returned data has,
 * providing autocomplete and type checking when you use the results.
 * 
 * @param db - The SQLite database instance
 * @returns Promise that resolves to an array of Item objects
 */
export async function fetchItems(db: SQLiteDatabase): Promise<Item[]> {
  return db.getAllAsync<Item>('SELECT * FROM items;');
}